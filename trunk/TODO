
* Add a pseudo-revision for the current file state, if the file's been
  modified since it was last committed.

* Show decent progress feedback and keep processing events while talking
  to CVS.

* Implement some kind of cache of annotated revisions, so we don't have to
  keep going back to the server for them. Similarly diffs.

* Show CVS errors. (If we try to look at a non-existant file, say, there's
  no useful feedback at the moment.)

* Sort the revisions properly (cvs lists revisions with lots of dots in them
  out of order).

* Finish off support for going to an initial line. Need to re-implement it
  in a way that will continue to work when we talk to CVS asynchronously.
  (Store the line number in a field from the constructor, and blank it out
  when we've done the setting later?)

* Should we color the selected revisions so that if there's an interval
  selected, the earliest revision is shown in red, and the latest is shown
  in blue to correspond to the diff colors.

* Use a JTextPane for the checkin comments, and allow some kind of filter
  to be specified by the user to rewrite references to bugs as links to
  bug database entries or whatever; be able to launch a browser when these
  are clicked on. It would also be nice to recognize other filenames in
  GNU-style checkin comments, and have links that caused a RevisionTool
  window to open for that file.

* Add search functionality. Usual C-D, C-F, C-G trio. I don't know how we
  can do Edit-like alpha highlighting, which is a shame.

* Add go to line functionality (not usually useful because you'd do it on the
  command line, or have your editor do it for you).

* Add C-A and C-C to the JList, so we can copy text out of it. (We can already
  copy checkin comments from the JTextArea.) Do we need an explicit patch
  export facility if we can just copy/paste?

* Follow symlinks.

* For a given line, make it possible (and easy) to find out automatically
  when that line was removed. Search forward through revisions until we
  can't find the line.
