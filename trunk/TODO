* When we can correctly go from a line in a patch to the corresponding
  line in a revision, use that logic to fix the annotation view's
  behavior when switching revisions; currently it just goes to the
  same-numbered line in the target revision (there's a FIXME).

* It would be better than translating tabs to spaces if we could actually
  render tabs properly in our JList's cell renderer. At least, what I'm
  trying to say is that it will suck if copying and pasting from our
  annotations or differences will mangle your tabs.

* How about showing "+x -y" in the status line when showing a diff? I
  quite like that as an overview of the patch. Maybe the revision numbers
  involved too, because they're not necessarily visible elsewhere. (If
  we're going to waste screen space on a status line, we may as well try
  to use it.)

* martind: The revisions aren't sorted numerically - which I don't care
  about in itself - but finding 1.34 in the list is then a job for the
  computer.

* martind: I'm wanting to see the change that this line was part of. When
  I've been looking at a diff and I go back to looking at the latest
  version, it would be much more useful to show me the part of the
  latest version that the diff referred to.

* martind: Wot no search?

* With the pseudo-revision for the current file state, work out how to
  fix the annotations view. The diffs are fine. Would it be good not to
  have a the pseudo-revision if the file is unchanged? How can we tell
  in BitKeeper and CVS?

* Show decent progress feedback and keep processing events while talking
  to CVS.

* Implement some kind of cache of annotated revisions, so we don't have to
  keep going back to the server for them. Similarly diffs.

* Show CVS errors. (If we try to look at a non-existant file, say, there's
  no useful feedback at the moment.)

* Sort the revisions properly (cvs lists revisions with lots of dots in them
  out of order).

* Finish off support for going to an initial line. Need to re-implement it
  in a way that will continue to work when we talk to CVS asynchronously.
  (Store the line number in a field from the constructor, and blank it out
  when we've done the setting later?)

* Use a JTextPane for the checkin comments, and allow some kind of filter
  to be specified by the user to rewrite references to bugs as links to
  bug database entries or whatever; be able to launch a browser when these
  are clicked on. It would also be nice to recognize other filenames in
  GNU-style checkin comments, and have links that caused a RevisionTool
  window to open for that file.

* Add search functionality. Usual C-D, C-F, C-G trio. I don't know how we
  can do Edit-like alpha highlighting, which is a shame.

* Add go to line functionality (not usually useful because you'd do it on the
  command line, or have your editor do it for you).

* For a given line, make it possible (and easy) to find out automatically
  when that line was removed. Search forward through revisions until we
  can't find the line.
