* Martin explains how we can work with change sets:

   Given the ChangeSet number from bk r2c, we can find the range of
   revisions it compromises it each of its files:

    doozer:~/xray/libs/genmgmtserver$ bk rset -r1.2887.110.4
    ChangeSet|1.2887.110.3..1.2887.110.4
    tcp/http/socket.cpp|1.78..1.79
    libs/genmgmtserver/GenericManagementServer.h|1.29..1.30
    libs/management/ftp/session.cpp|1.16..1.17
    fsb/resolve/resolve.cpp|1.27..1.28
    libs/telnet/telnet.cpp|1.75..1.76
    libs/management/sictrlserver/MgmntServer.cpp|1.55..1.56
    libs/genmgmtserver/connections.cpp|1.12..1.13
    doozer:~/xray/libs/genmgmtserver$

   We could grok this output and fork off new RevisionWindows for each
   file, in patch view across the specified range of revisions. Revisiontool
   didn't seem too happy about being asked to look at ChangeSet but, 'part
   from that, sounds easy enough, dunnit?

  I added:

   We could make it work for CVS by pulling the other filenames out of
   the revision comment for the first file you thought of.

   If we pulled the content pane out of RevisionWindow (as we should), we
   could even have a ChangeSetWindow with a JTabbedPane with a tab per
   file from the change set.

* Some way of asking for the patch containing the most recent change to
  the current line. And a catchy enough name that we can put it on a
  sensibly-sized menu item or button!

* Tracing the history of a line: how much quicker would this be if we
  could see an annotated clickable list of all the versions of the line?
  (But how do we get that list?)

* Ability to export either a whole patch or just selected hunks to
  a valid patch file; possibly also with the ability to apply the patch.

* The annotated view might be clearer if we didn't repeat duplicate
  authors and revision numbers. It also might not.

* Some way to move to the previous/next line in the selected
  revision (i.e. the blue lines).

* When we can correctly go from a line in a patch to the corresponding
  line in a revision, use that logic to fix the annotation view's
  behavior when switching revisions; currently it just goes to the
  same-numbered line in the target revision (there's a FIXME).

* It would be better than translating tabs to spaces if we could actually
  render tabs properly in our JList's cell renderer. At least, what I'm
  trying to say is that it will suck if copying and pasting from our
  annotations or differences will mangle your tabs.

* How about showing "+x -y" in the status line when showing a diff? I
  quite like that as an overview of the patch. Maybe the revision numbers
  involved too, because they're not necessarily visible elsewhere. (If
  we're going to waste screen space on a status line, we may as well try
  to use it.)

* martind: I'm wanting to see the change that this line was part of. When
  I've been looking at a diff and I go back to looking at the latest
  version, it would be much more useful to show me the part of the
  latest version that the diff referred to.

* Fix the annotation view for the pseudo-revision corresponding to the
  current file state. We can easily get annotations for the last checked-in
  revision, and we have a patch between that revision and the local file, so
  all we need to do is "apply" the patch to the annotations. So we remove
  the red lines (based on number, not content, because we *know* the patch
  is good, yet the line content will be different because of the annotations),
  and insert the blue lines, possibly with made-up annotation.

* Show decent progress feedback and keep processing events while talking
  to CVS.

* Implement some kind of cache of annotated revisions, so we don't have to
  keep going back to the server for them. Similarly diffs.

* Sort the revisions properly (cvs lists revisions with lots of dots in them
  out of order).

* When displaying all the checkin comments between two selected revisions,
  we shouldn't display comments which aren't on the same branch. How do
  we decide whether they are or not?

* Use a JTextPane for the checkin comments, and allow some kind of filter
  to be specified by the user to rewrite references to bugs as links to
  bug database entries or whatever; be able to launch a browser when these
  are clicked on. It would also be nice to recognize other filenames in
  GNU-style checkin comments, and have links that caused a RevisionTool
  window to open for that file.

* Add search functionality. Usual C-D, C-F, C-G trio. I don't know how we
  can do Edit-like alpha highlighting, which is a shame.

* Add go to line functionality. This is not usually useful because you'd do
  it on the command line, or have your editor do it for you. It's probably
  only useful if you know you want a given line in a given revision.

* For a given line, make it possible (and easy) to find out automatically
  when that line was removed. Search forward through revisions until we
  can't find the line. Relatedly: for a given line, make it easy to find
  out automatically when that line was introduced.

